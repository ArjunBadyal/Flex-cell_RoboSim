simulation 
import BooleanLogic;
import DataWriter;
import DataWriterConfig;
import FMI2;
import FMI2Component;
import Logger;
import Math;
import SimulationControl;
{
 	bool global_execution_continue = true;
	int status = 0;
	Math math = null;
	Logger logger = null;
	DataWriter dataWriter = null;
	BooleanLogic booleanLogic = null;
	@mapFmu(mapping -> "{mapping}");
	FMI2 mapping = null;
	@mapFmu(dmodel -> "{dmodel}");
	FMI2 dmodel = null;
	@mapFmu(controller -> "{controller}");
	FMI2 controller = null;
	@mapInstance(controller_1 -> "controller");
	FMI2Component controller_1 = null;
	@mapInstance(mapping_1 -> "mapping");
	FMI2Component mapping_1 = null;
	@mapInstance(dmodel_1 -> "dmodel");
	FMI2Component dmodel_1 = null;
	try 
	{
		math = load("Math");
		if( ((math == null)) )
		{
				error "math IS NULL ";
		}
		logger = load("Logger");
		if( ((logger == null)) )
		{
				error "logger IS NULL ";
		}
		dataWriter = load("DataWriter");
		if( ((dataWriter == null)) )
		{
				error "dataWriter IS NULL ";
		}
		booleanLogic = load("BooleanLogic");
		if( ((booleanLogic == null)) )
		{
				error "booleanLogic IS NULL ";
		}
		mapping = load("FMI2", "77236337-210e-4e9c-8f2c-c1a0677db21b", "file:/home/santiago/York/flex-cell/co-simulation/models/mappingFMU.fmu");
		if( ((mapping == null)) )
		{
				error "mapping IS NULL ";
		}
		dmodel = load("FMI2", "{1AE5E10D-9521-4DE3-80B9-D0EAAA7D5AF1}", "file:/home/santiago/York/flex-cell/co-simulation/models/dmodelFMU.fmu");
		if( ((dmodel == null)) )
		{
				error "dmodel IS NULL ";
		}
		controller = load("FMI2", "77236337-210e-4e9c-8f2c-c1a0677db21b", "file:/home/santiago/York/flex-cell/co-simulation/models/controllerFMU.fmu");
		if( ((controller == null)) )
		{
				error "controller IS NULL ";
		}
		controller_1 = controller.instantiate("controller", false, true);
		if( ((controller_1 == null)) )
		{
				error "controller_1 IS NULL ";
		}
		mapping_1 = mapping.instantiate("mapping", false, true);
		if( ((mapping_1 == null)) )
		{
				error "mapping_1 IS NULL ";
		}
		dmodel_1 = dmodel.instantiate("dmodel", false, true);
		if( ((dmodel_1 == null)) )
		{
				error "dmodel_1 IS NULL ";
		}
		if( ((global_execution_continue)) )
		{
				real STEP_SIZE = 0.5;
				real START_TIME = 0.0;
				real END_TIME = 15.0;
				int FMI_OK = 0;
				int FMI_DISCARD = 2;
				int FMI_ERROR = 3;
				int FMI_FATAL = 4;
				BooleanLogic booleanLogic1;
				try 
				{
					booleanLogic1 = load("BooleanLogic");
					if( (booleanLogic1 == null) )
					{
							error "Failed load of: booleanLogic1";
					}
					string dmodel_1StringShare[1];
					string dmodel_1StringIo[38];
					real dmodel_1RealShare[4];
					real mapping_1RealShare[3];
					bool dmodel_1BoolIo[38];
					bool mapping_1BoolShare[10];
					bool mapping_1BoolIo[67];
					string mapping_1StringIo[67];
					string controller_1StringShare[1];
					string controller_1StringIo[4];
					real mapping_1RealIo[67];
					uint mapping_1UintVref[67];
					real controller_1RealShare[3];
					real controller_1RealIo[4];
					uint controller_1UintVref[4];
					real dmodel_1RealIo[38];
					uint dmodel_1UintVref[38];
					real fixed_end_time = 0.0;
					fixed_end_time = END_TIME;
					status = dmodel_1.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setupExperiment' on 'dmodel_1'";
					}
					status = mapping_1.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setupExperiment' on 'mapping_1'";
					}
					status = controller_1.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'setupExperiment' on 'controller_1'";
					}
					dmodel_1UintVref[0] = 13;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 14;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 15;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 16;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 17;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 18;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 19;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 20;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 21;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 22;
					dmodel_1RealIo[0] = 0.0;
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					status = dmodel_1.enterInitializationMode();
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'enterInitializationMode' on 'dmodel_1'";
					}
					status = mapping_1.enterInitializationMode();
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'enterInitializationMode' on 'mapping_1'";
					}
					status = controller_1.enterInitializationMode();
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'enterInitializationMode' on 'controller_1'";
					}
					controller_1UintVref[0] = 3;
					status = controller_1.getReal(controller_1UintVref, 1, controller_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'getReal' on 'controller_1'";
					}
					controller_1RealShare[0] = controller_1RealIo[0];
					mapping_1UintVref[0] = 3;
					mapping_1RealIo[0] = controller_1RealShare[0];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					controller_1UintVref[0] = 0;
					status = controller_1.getString(controller_1UintVref, 1, controller_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'getString' on 'controller_1'";
					}
					controller_1StringShare[0] = controller_1StringIo[0];
					mapping_1UintVref[0] = 0;
					mapping_1StringIo[0] = controller_1StringShare[0];
					status = mapping_1.setString(mapping_1UintVref, 1, mapping_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setString' on 'mapping_1'";
					}
					controller_1UintVref[0] = 1;
					status = controller_1.getReal(controller_1UintVref, 1, controller_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'getReal' on 'controller_1'";
					}
					controller_1RealShare[1] = controller_1RealIo[0];
					mapping_1UintVref[0] = 1;
					mapping_1RealIo[0] = controller_1RealShare[1];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					controller_1UintVref[0] = 2;
					status = controller_1.getReal(controller_1UintVref, 1, controller_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'getReal' on 'controller_1'";
					}
					controller_1RealShare[2] = controller_1RealIo[0];
					mapping_1UintVref[0] = 2;
					mapping_1RealIo[0] = controller_1RealShare[2];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					mapping_1UintVref[0] = 65;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[0] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 9;
					dmodel_1BoolIo[0] = mapping_1BoolShare[0];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 47;
					status = mapping_1.getReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getReal' on 'mapping_1'";
					}
					mapping_1RealShare[0] = mapping_1RealIo[0];
					dmodel_1UintVref[0] = 10;
					dmodel_1RealIo[0] = mapping_1RealShare[0];
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 66;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[1] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 0;
					dmodel_1BoolIo[0] = mapping_1BoolShare[1];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 59;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[2] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 7;
					dmodel_1BoolIo[0] = mapping_1BoolShare[2];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 62;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[3] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 1;
					dmodel_1BoolIo[0] = mapping_1BoolShare[3];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 60;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[4] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 4;
					dmodel_1BoolIo[0] = mapping_1BoolShare[4];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 58;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[5] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 2;
					dmodel_1BoolIo[0] = mapping_1BoolShare[5];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 48;
					status = mapping_1.getReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getReal' on 'mapping_1'";
					}
					mapping_1RealShare[1] = mapping_1RealIo[0];
					dmodel_1UintVref[0] = 11;
					dmodel_1RealIo[0] = mapping_1RealShare[1];
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 63;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[6] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 5;
					dmodel_1BoolIo[0] = mapping_1BoolShare[6];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 64;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[7] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 6;
					dmodel_1BoolIo[0] = mapping_1BoolShare[7];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 49;
					status = mapping_1.getReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getReal' on 'mapping_1'";
					}
					mapping_1RealShare[2] = mapping_1RealIo[0];
					dmodel_1UintVref[0] = 12;
					dmodel_1RealIo[0] = mapping_1RealShare[2];
					status = dmodel_1.setReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setReal' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 57;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[8] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 8;
					dmodel_1BoolIo[0] = mapping_1BoolShare[8];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 61;
					status = mapping_1.getBoolean(mapping_1UintVref, 1, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1BoolShare[9] = mapping_1BoolIo[0];
					dmodel_1UintVref[0] = 3;
					dmodel_1BoolIo[0] = mapping_1BoolShare[9];
					status = dmodel_1.setBoolean(dmodel_1UintVref, 1, dmodel_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'setBoolean' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 29;
					status = dmodel_1.getReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getReal' on 'dmodel_1'";
					}
					dmodel_1RealShare[0] = dmodel_1RealIo[0];
					mapping_1UintVref[0] = 37;
					mapping_1RealIo[0] = dmodel_1RealShare[0];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					dmodel_1UintVref[0] = 30;
					status = dmodel_1.getReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getReal' on 'dmodel_1'";
					}
					dmodel_1RealShare[1] = dmodel_1RealIo[0];
					mapping_1UintVref[0] = 39;
					mapping_1RealIo[0] = dmodel_1RealShare[1];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					dmodel_1UintVref[0] = 27;
					status = dmodel_1.getString(dmodel_1UintVref, 1, dmodel_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getString' on 'dmodel_1'";
					}
					dmodel_1StringShare[0] = dmodel_1StringIo[0];
					mapping_1UintVref[0] = 35;
					mapping_1StringIo[0] = dmodel_1StringShare[0];
					status = mapping_1.setString(mapping_1UintVref, 1, mapping_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setString' on 'mapping_1'";
					}
					dmodel_1UintVref[0] = 31;
					status = dmodel_1.getReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getReal' on 'dmodel_1'";
					}
					dmodel_1RealShare[2] = dmodel_1RealIo[0];
					mapping_1UintVref[0] = 40;
					mapping_1RealIo[0] = dmodel_1RealShare[2];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					dmodel_1UintVref[0] = 28;
					status = dmodel_1.getReal(dmodel_1UintVref, 1, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getReal' on 'dmodel_1'";
					}
					dmodel_1RealShare[3] = dmodel_1RealIo[0];
					mapping_1UintVref[0] = 36;
					mapping_1RealIo[0] = dmodel_1RealShare[3];
					status = mapping_1.setReal(mapping_1UintVref, 1, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'setReal' on 'mapping_1'";
					}
					status = dmodel_1.exitInitializationMode();
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'exitInitializationMode' on 'dmodel_1'";
					}
					status = mapping_1.exitInitializationMode();
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'exitInitializationMode' on 'mapping_1'";
					}
					status = controller_1.exitInitializationMode();
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'exitInitializationMode' on 'controller_1'";
					}
				}				finally 
				{
					if( (booleanLogic1 != null) )
					{
							unload(booleanLogic1);
							booleanLogic1 = null;
					}
				}
				BooleanLogic booleanLogic2;
				DataWriter dataWriter1;
				SimulationControl simulationControl;
				try 
				{
					simulationControl = load("SimulationControl");
					if( (simulationControl == null) )
					{
							error "Failed load of: simulationControl";
					}
					dataWriter1 = load("DataWriter");
					if( (dataWriter1 == null) )
					{
							error "Failed load of: dataWriter1";
					}
					booleanLogic2 = load("BooleanLogic");
					if( (booleanLogic2 == null) )
					{
							error "Failed load of: booleanLogic2";
					}
					bool controller_1CurrentTimeFullStep = true;
					real controller_1CurrentTime = 0.0;
					bool mapping_1CurrentTimeFullStep = true;
					real mapping_1CurrentTime = 0.0;
					bool dmodel_1CurrentTimeFullStep = true;
					real dmodel_1CurrentTime = 0.0;
					bool dmodel_1BoolIo[38];
					real mapping_1RealShare[27];
					bool mapping_1BoolShare[10];
					string mapping_1StringShare[3];
					real dmodel_1RealShare[4];
					string dmodel_1StringShare[2];
					real controller_1RealShare[3];
					string controller_1StringShare[1];
					string controller_1StringIo[4];
					real controller_1RealIo[4];
					uint controller_1UintVref[4];
					real mapping_1RealIo[67];
					string mapping_1StringIo[67];
					bool mapping_1BoolIo[67];
					uint mapping_1UintVref[67];
					real dmodel_1RealIo[38];
					string dmodel_1StringIo[38];
					uint dmodel_1UintVref[38];
					real jac_current_step_size = 0.0;
					real jac_step_size = 0.0;
					@TransferAs("START_TIME");
					real jac_current_communication_point = 0.0;
					real jac_end_time = 0.0;
					jac_current_step_size = STEP_SIZE;
					jac_step_size = STEP_SIZE;
					jac_current_communication_point = START_TIME;
					jac_end_time = END_TIME;
					string datawriter_headers[50] = { "{dmodel}.dmodel.state" , "{dmodel}.dmodel.d_model_event" , "{dmodel}.dmodel.d_model_event_args_0" , "{dmodel}.dmodel.d_model_event_args_1" , "{dmodel}.dmodel.d_model_event_args_2" , "{dmodel}.dmodel.d_model_event_args_3" , "{mapping}.mapping.controller_event" , "{mapping}.mapping.j0" , "{mapping}.mapping.j1" , "{mapping}.mapping.j2" , "{mapping}.mapping.j3" , "{mapping}.mapping.j4" , "{mapping}.mapping.j5" , "{mapping}.mapping.qd0" , "{mapping}.mapping.qd1" , "{mapping}.mapping.qd2" , "{mapping}.mapping.qd3" , "{mapping}.mapping.qd4" , "{mapping}.mapping.qd5" , "{mapping}.mapping.qdd0" , "{mapping}.mapping.qdd1" , "{mapping}.mapping.qdd2" , "{mapping}.mapping.qdd3" , "{mapping}.mapping.qdd4" , "{mapping}.mapping.qdd5" , "{mapping}.mapping.t0" , "{mapping}.mapping.t1" , "{mapping}.mapping.t2" , "{mapping}.mapping.t3" , "{mapping}.mapping.t4" , "{mapping}.mapping.t5" , "{mapping}.mapping.d_model_event" , "{mapping}.mapping.output_event" , "{mapping}.mapping.output_event_args_0" , "{mapping}.mapping.output_event_args_1" , "{mapping}.mapping.output_event_args_2" , "{mapping}.mapping.platform_event_0" , "{mapping}.mapping.platform_event_1" , "{mapping}.mapping.platform_event_2" , "{mapping}.mapping.platform_event_3" , "{mapping}.mapping.platform_event_4" , "{mapping}.mapping.platform_event_5" , "{mapping}.mapping.platform_event_6" , "{mapping}.mapping.platform_event_7" , "{mapping}.mapping.platform_event_8" , "{mapping}.mapping.platform_event_9" , "{controller}.controller.controller_event" , "{controller}.controller.controller_event_args_0" , "{controller}.controller.controller_event_args_1" , "{controller}.controller.controller_event_args_2" };
					DataWriterConfig datawriter_configuration = dataWriter1.writeHeader(datawriter_headers);
					dmodel_1UintVref[0] = 24;
					dmodel_1UintVref[1] = 27;
					status = dmodel_1.getString(dmodel_1UintVref, 2, dmodel_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getString' on 'dmodel_1'";
					}
					dmodel_1UintVref[0] = 28;
					dmodel_1UintVref[1] = 29;
					dmodel_1UintVref[2] = 30;
					dmodel_1UintVref[3] = 31;
					status = dmodel_1.getReal(dmodel_1UintVref, 4, dmodel_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
							}
							error "Failed to 'getReal' on 'dmodel_1'";
					}
					mapping_1UintVref[0] = 57;
					mapping_1UintVref[1] = 58;
					mapping_1UintVref[2] = 59;
					mapping_1UintVref[3] = 60;
					mapping_1UintVref[4] = 61;
					mapping_1UintVref[5] = 62;
					mapping_1UintVref[6] = 63;
					mapping_1UintVref[7] = 64;
					mapping_1UintVref[8] = 65;
					mapping_1UintVref[9] = 66;
					status = mapping_1.getBoolean(mapping_1UintVref, 10, mapping_1BoolIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getBoolean' on 'mapping_1'";
					}
					mapping_1UintVref[0] = 0;
					mapping_1UintVref[1] = 35;
					mapping_1UintVref[2] = 46;
					status = mapping_1.getString(mapping_1UintVref, 3, mapping_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getString' on 'mapping_1'";
					}
					mapping_1UintVref[0] = 11;
					mapping_1UintVref[1] = 12;
					mapping_1UintVref[2] = 13;
					mapping_1UintVref[3] = 14;
					mapping_1UintVref[4] = 15;
					mapping_1UintVref[5] = 16;
					mapping_1UintVref[6] = 17;
					mapping_1UintVref[7] = 18;
					mapping_1UintVref[8] = 19;
					mapping_1UintVref[9] = 20;
					mapping_1UintVref[10] = 21;
					mapping_1UintVref[11] = 22;
					mapping_1UintVref[12] = 23;
					mapping_1UintVref[13] = 24;
					mapping_1UintVref[14] = 25;
					mapping_1UintVref[15] = 26;
					mapping_1UintVref[16] = 27;
					mapping_1UintVref[17] = 28;
					mapping_1UintVref[18] = 29;
					mapping_1UintVref[19] = 30;
					mapping_1UintVref[20] = 31;
					mapping_1UintVref[21] = 32;
					mapping_1UintVref[22] = 33;
					mapping_1UintVref[23] = 34;
					mapping_1UintVref[24] = 47;
					mapping_1UintVref[25] = 48;
					mapping_1UintVref[26] = 49;
					status = mapping_1.getReal(mapping_1UintVref, 27, mapping_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", mapping_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", mapping_1);
							}
							error "Failed to 'getReal' on 'mapping_1'";
					}
					controller_1UintVref[0] = 1;
					controller_1UintVref[1] = 2;
					controller_1UintVref[2] = 3;
					status = controller_1.getReal(controller_1UintVref, 3, controller_1RealIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'getReal' on 'controller_1'";
					}
					controller_1UintVref[0] = 0;
					status = controller_1.getString(controller_1UintVref, 1, controller_1StringIo);
					if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
					{
							if( (status == FMI_ERROR) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", controller_1);
							}
							if( (status == FMI_FATAL) )
							{
									logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", controller_1);
							}
							error "Failed to 'getString' on 'controller_1'";
					}
					controller_1StringShare[0] = controller_1StringIo[0];
					controller_1RealShare[0] = controller_1RealIo[0];
					controller_1RealShare[1] = controller_1RealIo[1];
					controller_1RealShare[2] = controller_1RealIo[2];
					dmodel_1StringShare[0] = dmodel_1StringIo[0];
					dmodel_1StringShare[1] = dmodel_1StringIo[1];
					dmodel_1RealShare[0] = dmodel_1RealIo[0];
					dmodel_1RealShare[1] = dmodel_1RealIo[1];
					dmodel_1RealShare[2] = dmodel_1RealIo[2];
					dmodel_1RealShare[3] = dmodel_1RealIo[3];
					mapping_1StringShare[0] = mapping_1StringIo[0];
					mapping_1StringShare[1] = mapping_1StringIo[1];
					mapping_1StringShare[2] = mapping_1StringIo[2];
					mapping_1BoolShare[0] = mapping_1BoolIo[0];
					mapping_1BoolShare[1] = mapping_1BoolIo[1];
					mapping_1BoolShare[2] = mapping_1BoolIo[2];
					mapping_1BoolShare[3] = mapping_1BoolIo[3];
					mapping_1BoolShare[4] = mapping_1BoolIo[4];
					mapping_1BoolShare[5] = mapping_1BoolIo[5];
					mapping_1BoolShare[6] = mapping_1BoolIo[6];
					mapping_1BoolShare[7] = mapping_1BoolIo[7];
					mapping_1BoolShare[8] = mapping_1BoolIo[8];
					mapping_1BoolShare[9] = mapping_1BoolIo[9];
					mapping_1RealShare[0] = mapping_1RealIo[0];
					mapping_1RealShare[1] = mapping_1RealIo[1];
					mapping_1RealShare[2] = mapping_1RealIo[2];
					mapping_1RealShare[3] = mapping_1RealIo[3];
					mapping_1RealShare[4] = mapping_1RealIo[4];
					mapping_1RealShare[5] = mapping_1RealIo[5];
					mapping_1RealShare[6] = mapping_1RealIo[6];
					mapping_1RealShare[7] = mapping_1RealIo[7];
					mapping_1RealShare[8] = mapping_1RealIo[8];
					mapping_1RealShare[9] = mapping_1RealIo[9];
					mapping_1RealShare[10] = mapping_1RealIo[10];
					mapping_1RealShare[11] = mapping_1RealIo[11];
					mapping_1RealShare[12] = mapping_1RealIo[12];
					mapping_1RealShare[13] = mapping_1RealIo[13];
					mapping_1RealShare[14] = mapping_1RealIo[14];
					mapping_1RealShare[15] = mapping_1RealIo[15];
					mapping_1RealShare[16] = mapping_1RealIo[16];
					mapping_1RealShare[17] = mapping_1RealIo[17];
					mapping_1RealShare[18] = mapping_1RealIo[18];
					mapping_1RealShare[19] = mapping_1RealIo[19];
					mapping_1RealShare[20] = mapping_1RealIo[20];
					mapping_1RealShare[21] = mapping_1RealIo[21];
					mapping_1RealShare[22] = mapping_1RealIo[22];
					mapping_1RealShare[23] = mapping_1RealIo[23];
					mapping_1RealShare[24] = mapping_1RealIo[24];
					mapping_1RealShare[25] = mapping_1RealIo[25];
					mapping_1RealShare[26] = mapping_1RealIo[26];
					real fmu_communicationpoints[3];
					dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, dmodel_1StringShare[0], dmodel_1StringShare[1], dmodel_1RealShare[0], dmodel_1RealShare[1], dmodel_1RealShare[2], dmodel_1RealShare[3], mapping_1StringShare[0], mapping_1RealShare[0], mapping_1RealShare[1], mapping_1RealShare[2], mapping_1RealShare[3], mapping_1RealShare[4], mapping_1RealShare[5], mapping_1RealShare[6], mapping_1RealShare[7], mapping_1RealShare[8], mapping_1RealShare[9], mapping_1RealShare[10], mapping_1RealShare[11], mapping_1RealShare[12], mapping_1RealShare[13], mapping_1RealShare[14], mapping_1RealShare[15], mapping_1RealShare[16], mapping_1RealShare[17], mapping_1RealShare[18], mapping_1RealShare[19], mapping_1RealShare[20], mapping_1RealShare[21], mapping_1RealShare[22], mapping_1RealShare[23], mapping_1StringShare[1], mapping_1StringShare[2], mapping_1RealShare[24], mapping_1RealShare[25], mapping_1RealShare[26], mapping_1BoolShare[0], mapping_1BoolShare[1], mapping_1BoolShare[2], mapping_1BoolShare[3], mapping_1BoolShare[4], mapping_1BoolShare[5], mapping_1BoolShare[6], mapping_1BoolShare[7], mapping_1BoolShare[8], mapping_1BoolShare[9], controller_1StringShare[0], controller_1RealShare[0], controller_1RealShare[1], controller_1RealShare[2]);
					bool any_discards = false;
					while( ((jac_current_communication_point + jac_current_step_size) < jac_end_time) )
					{
						bool tmp = simulationControl.stopRequested();
						if( (tmp) )
						{
								error "Simulation stopped by user";
						}
						@Transfer();
						dmodel_1UintVref[0] = 0;
						dmodel_1UintVref[1] = 1;
						dmodel_1UintVref[2] = 2;
						dmodel_1UintVref[3] = 3;
						dmodel_1UintVref[4] = 4;
						dmodel_1UintVref[5] = 5;
						dmodel_1UintVref[6] = 6;
						dmodel_1UintVref[7] = 7;
						dmodel_1UintVref[8] = 8;
						dmodel_1UintVref[9] = 9;
						dmodel_1BoolIo[0] = mapping_1BoolShare[9];
						dmodel_1BoolIo[1] = mapping_1BoolShare[5];
						dmodel_1BoolIo[2] = mapping_1BoolShare[1];
						dmodel_1BoolIo[3] = mapping_1BoolShare[4];
						dmodel_1BoolIo[4] = mapping_1BoolShare[3];
						dmodel_1BoolIo[5] = mapping_1BoolShare[6];
						dmodel_1BoolIo[6] = mapping_1BoolShare[7];
						dmodel_1BoolIo[7] = mapping_1BoolShare[2];
						dmodel_1BoolIo[8] = mapping_1BoolShare[0];
						dmodel_1BoolIo[9] = mapping_1BoolShare[8];
						status = dmodel_1.setBoolean(dmodel_1UintVref, 10, dmodel_1BoolIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
								}
								error "Failed to 'setBoolean' on 'dmodel_1'";
						}
						dmodel_1UintVref[0] = 10;
						dmodel_1UintVref[1] = 11;
						dmodel_1UintVref[2] = 12;
						dmodel_1RealIo[0] = mapping_1RealShare[24];
						dmodel_1RealIo[1] = mapping_1RealShare[25];
						dmodel_1RealIo[2] = mapping_1RealShare[26];
						status = dmodel_1.setReal(dmodel_1UintVref, 3, dmodel_1RealIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", dmodel_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", dmodel_1);
								}
								error "Failed to 'setBoolean' on 'dmodel_1'";
						}
						mapping_1UintVref[0] = 0;
						mapping_1UintVref[1] = 35;
						mapping_1StringIo[0] = controller_1StringShare[0];
						mapping_1StringIo[1] = dmodel_1StringShare[1];
						status = mapping_1.setString(mapping_1UintVref, 2, mapping_1StringIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", mapping_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", mapping_1);
								}
								error "Failed to 'setString' on 'mapping_1'";
						}
						mapping_1UintVref[0] = 1;
						mapping_1UintVref[1] = 2;
						mapping_1UintVref[2] = 3;
						mapping_1UintVref[3] = 36;
						mapping_1UintVref[4] = 37;
						mapping_1UintVref[5] = 39;
						mapping_1UintVref[6] = 40;
						mapping_1RealIo[0] = controller_1RealShare[0];
						mapping_1RealIo[1] = controller_1RealShare[1];
						mapping_1RealIo[2] = controller_1RealShare[2];
						mapping_1RealIo[3] = dmodel_1RealShare[0];
						mapping_1RealIo[4] = dmodel_1RealShare[1];
						mapping_1RealIo[5] = dmodel_1RealShare[2];
						mapping_1RealIo[6] = dmodel_1RealShare[3];
						status = mapping_1.setReal(mapping_1UintVref, 7, mapping_1RealIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", mapping_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", mapping_1);
								}
								error "Failed to 'setString' on 'mapping_1'";
						}
						any_discards = false;
						status = dmodel_1.doStep(jac_current_communication_point, jac_current_step_size, false);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", dmodel_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", dmodel_1);
								}
								error "Failed to 'doStep' on 'dmodel_1'";
						}
						if( (status != FMI_OK) )
						{
								if( (status == FMI_DISCARD) )
								{
										status = dmodel_1.getRealStatus(2, ref dmodel_1CurrentTime);
										dmodel_1CurrentTimeFullStep = false;
								}
						}
						else
						{
								dmodel_1CurrentTime = jac_current_communication_point + jac_current_step_size;
								dmodel_1CurrentTimeFullStep = true;
						}
						fmu_communicationpoints[0] = dmodel_1CurrentTime;
						if( (!dmodel_1CurrentTimeFullStep) )
						{
								logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "dmodel_1", jac_current_communication_point, jac_current_step_size, dmodel_1CurrentTime);
								any_discards = any_discards || !dmodel_1CurrentTimeFullStep;
						}
						status = mapping_1.doStep(jac_current_communication_point, jac_current_step_size, false);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", mapping_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", mapping_1);
								}
								error "Failed to 'doStep' on 'mapping_1'";
						}
						if( (status != FMI_OK) )
						{
								if( (status == FMI_DISCARD) )
								{
										status = mapping_1.getRealStatus(2, ref mapping_1CurrentTime);
										mapping_1CurrentTimeFullStep = false;
								}
						}
						else
						{
								mapping_1CurrentTime = jac_current_communication_point + jac_current_step_size;
								mapping_1CurrentTimeFullStep = true;
						}
						fmu_communicationpoints[1] = mapping_1CurrentTime;
						if( (!mapping_1CurrentTimeFullStep) )
						{
								logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "mapping_1", jac_current_communication_point, jac_current_step_size, mapping_1CurrentTime);
								any_discards = any_discards || !mapping_1CurrentTimeFullStep;
						}
						status = controller_1.doStep(jac_current_communication_point, jac_current_step_size, false);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", controller_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", controller_1);
								}
								error "Failed to 'doStep' on 'controller_1'";
						}
						if( (status != FMI_OK) )
						{
								if( (status == FMI_DISCARD) )
								{
										status = controller_1.getRealStatus(2, ref controller_1CurrentTime);
										controller_1CurrentTimeFullStep = false;
								}
						}
						else
						{
								controller_1CurrentTime = jac_current_communication_point + jac_current_step_size;
								controller_1CurrentTimeFullStep = true;
						}
						fmu_communicationpoints[2] = controller_1CurrentTime;
						if( (!controller_1CurrentTimeFullStep) )
						{
								logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "controller_1", jac_current_communication_point, jac_current_step_size, controller_1CurrentTime);
								any_discards = any_discards || !controller_1CurrentTimeFullStep;
						}
						controller_1UintVref[0] = 1;
						controller_1UintVref[1] = 2;
						controller_1UintVref[2] = 3;
						status = controller_1.getReal(controller_1UintVref, 3, controller_1RealIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", controller_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", controller_1);
								}
								error "Failed to 'getReal' on 'controller_1'";
						}
						controller_1UintVref[0] = 0;
						status = controller_1.getString(controller_1UintVref, 1, controller_1StringIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", controller_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", controller_1);
								}
								error "Failed to 'getString' on 'controller_1'";
						}
						dmodel_1UintVref[0] = 28;
						dmodel_1UintVref[1] = 29;
						dmodel_1UintVref[2] = 30;
						dmodel_1UintVref[3] = 31;
						status = dmodel_1.getReal(dmodel_1UintVref, 4, dmodel_1RealIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", dmodel_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", dmodel_1);
								}
								error "Failed to 'getReal' on 'dmodel_1'";
						}
						dmodel_1UintVref[0] = 24;
						dmodel_1UintVref[1] = 27;
						status = dmodel_1.getString(dmodel_1UintVref, 2, dmodel_1StringIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", dmodel_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", dmodel_1);
								}
								error "Failed to 'getString' on 'dmodel_1'";
						}
						mapping_1UintVref[0] = 57;
						mapping_1UintVref[1] = 58;
						mapping_1UintVref[2] = 59;
						mapping_1UintVref[3] = 60;
						mapping_1UintVref[4] = 61;
						mapping_1UintVref[5] = 62;
						mapping_1UintVref[6] = 63;
						mapping_1UintVref[7] = 64;
						mapping_1UintVref[8] = 65;
						mapping_1UintVref[9] = 66;
						status = mapping_1.getBoolean(mapping_1UintVref, 10, mapping_1BoolIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetBoolean failed on '%s' with status: FMI_ERROR", mapping_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetBoolean failed on '%s' with status: FMI_FATAL", mapping_1);
								}
								error "Failed to 'getBoolean' on 'mapping_1'";
						}
						mapping_1UintVref[0] = 0;
						mapping_1UintVref[1] = 35;
						mapping_1UintVref[2] = 46;
						status = mapping_1.getString(mapping_1UintVref, 3, mapping_1StringIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetString failed on '%s' with status: FMI_ERROR", mapping_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetString failed on '%s' with status: FMI_FATAL", mapping_1);
								}
								error "Failed to 'getString' on 'mapping_1'";
						}
						mapping_1UintVref[0] = 11;
						mapping_1UintVref[1] = 12;
						mapping_1UintVref[2] = 13;
						mapping_1UintVref[3] = 14;
						mapping_1UintVref[4] = 15;
						mapping_1UintVref[5] = 16;
						mapping_1UintVref[6] = 17;
						mapping_1UintVref[7] = 18;
						mapping_1UintVref[8] = 19;
						mapping_1UintVref[9] = 20;
						mapping_1UintVref[10] = 21;
						mapping_1UintVref[11] = 22;
						mapping_1UintVref[12] = 23;
						mapping_1UintVref[13] = 24;
						mapping_1UintVref[14] = 25;
						mapping_1UintVref[15] = 26;
						mapping_1UintVref[16] = 27;
						mapping_1UintVref[17] = 28;
						mapping_1UintVref[18] = 29;
						mapping_1UintVref[19] = 30;
						mapping_1UintVref[20] = 31;
						mapping_1UintVref[21] = 32;
						mapping_1UintVref[22] = 33;
						mapping_1UintVref[23] = 34;
						mapping_1UintVref[24] = 47;
						mapping_1UintVref[25] = 48;
						mapping_1UintVref[26] = 49;
						status = mapping_1.getReal(mapping_1UintVref, 27, mapping_1RealIo);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", mapping_1);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", mapping_1);
								}
								error "Failed to 'getReal' on 'mapping_1'";
						}
						controller_1StringShare[0] = controller_1StringIo[0];
						controller_1RealShare[0] = controller_1RealIo[0];
						controller_1RealShare[1] = controller_1RealIo[1];
						controller_1RealShare[2] = controller_1RealIo[2];
						dmodel_1StringShare[0] = dmodel_1StringIo[0];
						dmodel_1StringShare[1] = dmodel_1StringIo[1];
						dmodel_1RealShare[0] = dmodel_1RealIo[0];
						dmodel_1RealShare[1] = dmodel_1RealIo[1];
						dmodel_1RealShare[2] = dmodel_1RealIo[2];
						dmodel_1RealShare[3] = dmodel_1RealIo[3];
						mapping_1StringShare[0] = mapping_1StringIo[0];
						mapping_1StringShare[1] = mapping_1StringIo[1];
						mapping_1StringShare[2] = mapping_1StringIo[2];
						mapping_1BoolShare[0] = mapping_1BoolIo[0];
						mapping_1BoolShare[1] = mapping_1BoolIo[1];
						mapping_1BoolShare[2] = mapping_1BoolIo[2];
						mapping_1BoolShare[3] = mapping_1BoolIo[3];
						mapping_1BoolShare[4] = mapping_1BoolIo[4];
						mapping_1BoolShare[5] = mapping_1BoolIo[5];
						mapping_1BoolShare[6] = mapping_1BoolIo[6];
						mapping_1BoolShare[7] = mapping_1BoolIo[7];
						mapping_1BoolShare[8] = mapping_1BoolIo[8];
						mapping_1BoolShare[9] = mapping_1BoolIo[9];
						mapping_1RealShare[0] = mapping_1RealIo[0];
						mapping_1RealShare[1] = mapping_1RealIo[1];
						mapping_1RealShare[2] = mapping_1RealIo[2];
						mapping_1RealShare[3] = mapping_1RealIo[3];
						mapping_1RealShare[4] = mapping_1RealIo[4];
						mapping_1RealShare[5] = mapping_1RealIo[5];
						mapping_1RealShare[6] = mapping_1RealIo[6];
						mapping_1RealShare[7] = mapping_1RealIo[7];
						mapping_1RealShare[8] = mapping_1RealIo[8];
						mapping_1RealShare[9] = mapping_1RealIo[9];
						mapping_1RealShare[10] = mapping_1RealIo[10];
						mapping_1RealShare[11] = mapping_1RealIo[11];
						mapping_1RealShare[12] = mapping_1RealIo[12];
						mapping_1RealShare[13] = mapping_1RealIo[13];
						mapping_1RealShare[14] = mapping_1RealIo[14];
						mapping_1RealShare[15] = mapping_1RealIo[15];
						mapping_1RealShare[16] = mapping_1RealIo[16];
						mapping_1RealShare[17] = mapping_1RealIo[17];
						mapping_1RealShare[18] = mapping_1RealIo[18];
						mapping_1RealShare[19] = mapping_1RealIo[19];
						mapping_1RealShare[20] = mapping_1RealIo[20];
						mapping_1RealShare[21] = mapping_1RealIo[21];
						mapping_1RealShare[22] = mapping_1RealIo[22];
						mapping_1RealShare[23] = mapping_1RealIo[23];
						mapping_1RealShare[24] = mapping_1RealIo[24];
						mapping_1RealShare[25] = mapping_1RealIo[25];
						mapping_1RealShare[26] = mapping_1RealIo[26];
						if( (!any_discards) )
						{
								jac_current_communication_point = jac_current_communication_point + jac_current_step_size;
								dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, dmodel_1StringShare[0], dmodel_1StringShare[1], dmodel_1RealShare[0], dmodel_1RealShare[1], dmodel_1RealShare[2], dmodel_1RealShare[3], mapping_1StringShare[0], mapping_1RealShare[0], mapping_1RealShare[1], mapping_1RealShare[2], mapping_1RealShare[3], mapping_1RealShare[4], mapping_1RealShare[5], mapping_1RealShare[6], mapping_1RealShare[7], mapping_1RealShare[8], mapping_1RealShare[9], mapping_1RealShare[10], mapping_1RealShare[11], mapping_1RealShare[12], mapping_1RealShare[13], mapping_1RealShare[14], mapping_1RealShare[15], mapping_1RealShare[16], mapping_1RealShare[17], mapping_1RealShare[18], mapping_1RealShare[19], mapping_1RealShare[20], mapping_1RealShare[21], mapping_1RealShare[22], mapping_1RealShare[23], mapping_1StringShare[1], mapping_1StringShare[2], mapping_1RealShare[24], mapping_1RealShare[25], mapping_1RealShare[26], mapping_1BoolShare[0], mapping_1BoolShare[1], mapping_1BoolShare[2], mapping_1BoolShare[3], mapping_1BoolShare[4], mapping_1BoolShare[5], mapping_1BoolShare[6], mapping_1BoolShare[7], mapping_1BoolShare[8], mapping_1BoolShare[9], controller_1StringShare[0], controller_1RealShare[0], controller_1RealShare[1], controller_1RealShare[2]);
								jac_current_step_size = jac_step_size;
						}
					}
					dataWriter1.close();
				}				finally 
				{
					if( (simulationControl != null) )
					{
							unload(simulationControl);
							simulationControl = null;
					}
					if( (dataWriter1 != null) )
					{
							unload(dataWriter1);
							dataWriter1 = null;
					}
					if( (booleanLogic2 != null) )
					{
							unload(booleanLogic2);
							booleanLogic2 = null;
					}
				}
		}
		controller_1.terminate();
		mapping_1.terminate();
		dmodel_1.terminate();
	}	finally 
	{
		if( ((controller_1 != null)) )
		{
				controller.freeInstance(controller_1);
				controller_1 = null;
		}
		if( ((mapping_1 != null)) )
		{
				mapping.freeInstance(mapping_1);
				mapping_1 = null;
		}
		if( ((dmodel_1 != null)) )
		{
				dmodel.freeInstance(dmodel_1);
				dmodel_1 = null;
		}
		if( ((mapping != null)) )
		{
				unload(mapping);
				mapping = null;
		}
		if( ((dmodel != null)) )
		{
				unload(dmodel);
				dmodel = null;
		}
		if( ((controller != null)) )
		{
				unload(controller);
				controller = null;
		}
		if( ((math != null)) )
		{
				unload(math);
				math = null;
		}
		if( ((logger != null)) )
		{
				unload(logger);
				logger = null;
		}
		if( ((dataWriter != null)) )
		{
				unload(dataWriter);
				dataWriter = null;
		}
		if( ((booleanLogic != null)) )
		{
				unload(booleanLogic);
				booleanLogic = null;
		}
	}
}